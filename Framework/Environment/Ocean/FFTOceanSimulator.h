#pragma once

#include "Utilities/FFT.h"

#define HALF_SQRT_2	0.7071068f
#define GRAV_ACCEL	981.0f	// The acceleration of gravity, cm/s^2

#define BLOCK_SIZE_X 16
#define BLOCK_SIZE_Y 16



struct OceanParameter
{
	// Must be power of 2.
	int dmap_dim;
	// Typical value is 1000 ~ 2000
	float patch_length;

	// Adjust the time interval for simulation.
	float time_scale;
	// Amplitude for transverse wave. Around 1.0
	float wave_amplitude;
	// Wind direction. Normalization not required.
	D3DXVECTOR2 wind_dir;
	// Around 100 ~ 1000
	float wind_speed;
	// This value damps out the waves against the wind direction.
	// Smaller value means higher wind dependency.
	float wind_dependency;
	// The amplitude for longitudinal wave. Must be positive.
	float choppy_scale;
};

class FFTOceanSimulator
{
public:
	FFTOceanSimulator(OceanParameter& params);
	~FFTOceanSimulator();
	// -------------------------- Initialization & simulation routines ------------------------

	// Update ocean wave when tick arrives.
	void UpdateDisplacementMap(float time);

	// Texture access
	ID3D11ShaderResourceView* GetDisplacementMap() { return pDisplacementSRV; }
	ID3D11ShaderResourceView* GetGradientMap() { return pGradientSRV; }
	const OceanParameter& getParameters() { return oceanParam; }

private:

	struct ImmutableDesc
	{
		UINT ActualDim;
		UINT InWidth;
		UINT OutWidth;
		UINT OutHeight;
		UINT DxAddressOffset;
		UINT DyAddressOffset;

		Vector2 Padding;
	}immuteDesc;

	struct ChangePerFrameDesc
	{
		float Time;
		float ChoppyScale;
		float GridLen;
		float Padding;
	}changePFDesc;
private:
	// ---------------------------------- GPU shading asset -----------------------------------
	// Initialize the vector field.
	void initHeightMap(OceanParameter& params, D3DXVECTOR2* out_h0, float* out_omega);
	   
	OceanParameter oceanParam;	
private:
	Shader* shader;
	UINT disPass = 0;
	UINT gradPass = 1;
	UINT CSPass = 2;
	
	// ---------------------------------- GPU shading asset -----------------------------------
	// Displacement map
	ID3D11Texture2D* pDisplacementMap;		// (RGBA32F)
	ID3D11ShaderResourceView* pDisplacementSRV;
	ID3D11RenderTargetView* pDisplacementRTV;

	// Gradient field
	ID3D11Texture2D* pGradientMap;			// (RGBA16F)
	ID3D11ShaderResourceView* pGradientSRV;
	ID3D11RenderTargetView* pGradientRTV;
	
	// ----------------------------------- CS simulation data ---------------------------------
	// Initial height field H(0) generated by Phillips spectrum & Gauss distribution.
	StructuredBuffer* Float2_H0;
	// Angular frequency
	StructuredBuffer* Float_Omega;
	// Height field H(t), choppy field Dx(t) and Dy(t) in frequency domain, updated each frame.
	StructuredBuffer* Float2_Ht;
	// Height & choppy buffer in the space domain, corresponding to H(t), Dx(t) and Dy(t)
	StructuredBuffer* Float_Dxyz;
	
	VertexBuffer* QuadVB;

	// constants	
	ConstantBuffer* ImmutableCB;
	ConstantBuffer* PerFrameCB;

private:
	FFT* fftPlan;

};

